name: BuildPushDeploy

on:
    pull_request:
        types: [closed]
        branches:
            - main
            - dev

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.create_tag.outputs.tag }}
      tagname: ${{ steps.create_tag.outputs.tagname }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Get short SHA
        uses: benjlevesque/short-sha@v3.0
        id: short-sha
        with:
          length: 6

      - name: Calculate next tag
        id: create_tag
        run: |
          COMMIT_SHA=${{ steps.short-sha.outputs.sha }}
          PR_NUMBER=${{ github.event.pull_request.number }}
          echo "tag=v_${COMMIT_SHA}.${PR_NUMBER}" >> $GITHUB_OUTPUT
          echo "tagname=v_${COMMIT_SHA}.${PR_NUMBER}" >> $GITHUB_OUTPUT

  build-client:
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.24

      - name: Install clipboard dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libx11-dev libxtst-dev libc6-dev

      - name: Build CLI client
        run: |
          go build -ldflags "-X prx/internal/rpc.ClientVersion=${{ needs.prepare.outputs.tag }}" -o prx-client ./cmd/client/client.go

      - name: Upload CLI binary
        uses: actions/upload-artifact@v4
        with:
          name: prx-client
          path: prx-client

  docker:
    needs: prepare
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to GitHub Container Registry
        run: |
          echo "${{ secrets.GH_RUNNER }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build Docker image
        run: |
          echo "Building go_proxy image"
          docker build -t ghcr.io/typeterrors/go_proxy:${{ needs.prepare.outputs.tag }} \
            --build-arg VERSION=${{ needs.prepare.outputs.tag }} \
            -f ./go_proxy.dockerfile .

      - name: Push Docker image
        run: |
          echo "Pushing go_proxy image"
          docker push ghcr.io/typeterrors/go_proxy:${{ needs.prepare.outputs.tag }}
          docker tag ghcr.io/typeterrors/go_proxy:${{ needs.prepare.outputs.tag }} ghcr.io/typeterrors/go_proxy:latest
          docker push ghcr.io/typeterrors/go_proxy:latest

      - name: Clean up Docker images
        run: docker image prune -af

  release:
    needs:
      - prepare
      - docker
    runs-on: ubuntu-latest
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.prepare.outputs.tag }}
          release_name: ${{ needs.prepare.outputs.tagname }}
          draft: false
          prerelease: false

  deploy:
    needs:
      - prepare
      - release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'v1.28.0'

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: 'v3.8.0'

      - name: Configure Kube
        run: |
          mkdir -p ~/.kube
          printf "%s" "${{ secrets.KUBECONFIG }}" > ~/.kube/config
          kubectl config get-contexts

      - name: Create ServiceAccount in namespace
        run: |
          kubectl create serviceaccount prx-user -n ${{ secrets.NAME }} --dry-run=client -o yaml | kubectl apply -f -

      - name: Create Non-Expiring Token for ServiceAccount
        run: |
          kubectl apply -f - <<EOF
          apiVersion: v1
          kind: Secret
          metadata:
            name: prx-user-token
            namespace: ${{ secrets.NAME }}
            annotations:
              kubernetes.io/service-account.name: prx-user
          type: kubernetes.io/service-account-token
          EOF

      - name: Create Role for ServiceAccount
        run: |
          cat <<EOF | kubectl apply -f -
          apiVersion: rbac.authorization.k8s.io/v1
          kind: Role
          metadata:
            name: prx-user-role
            namespace: ${{ secrets.NAME }}
          rules:
          - apiGroups: [""]
            resources: ["secrets"]
            verbs: ["create","get","list","update","patch","delete"]
          - apiGroups: ["networking.k8s.io"]
            resources: ["ingresses"]
            verbs: ["create","get","list","update","patch","delete"]
          - apiGroups: [""]
            resources: ["configmaps"]
            verbs: ["get","list","create","update","patch","delete"]
          EOF

      - name: Create RoleBinding for ServiceAccount
        run: |
          cat <<EOF | kubectl apply -f -
          apiVersion: rbac.authorization.k8s.io/v1
          kind: RoleBinding
          metadata:
            name: prx-user-rolebinding
            namespace: ${{ secrets.NAME }}
          subjects:
          - kind: ServiceAccount
            name: prx-user
            namespace: ${{ secrets.NAME }}
          roleRef:
            kind: Role
            name: prx-user-role
            apiGroup: rbac.authorization.k8s.io
          EOF

      - name: Get Non-Expiring Token for ServiceAccount
        id: get_token
        run: |
          TOKEN=$(kubectl get secret prx-user-token -n ${{ secrets.NAME }} -o jsonpath='{.data.token}' | base64 --decode)
          echo "TOKEN=${TOKEN}" >> $GITHUB_OUTPUT

      - name: Get cluster info
        id: get_cluster_info
        run: |
          CLUSTER_SERVER=$(kubectl config view --minify --raw -o jsonpath='{.clusters[0].cluster.server}')
          CA_DATA=$(kubectl config view --minify --raw -o jsonpath='{.clusters[0].cluster.certificate-authority-data}')
          echo "CLUSTER_SERVER=${CLUSTER_SERVER}" >> $GITHUB_OUTPUT
          echo "CA_DATA=${CA_DATA}" >> $GITHUB_OUTPUT

      - name: Generate kubeconfig file
        id: generate_kubeconfig
        run: |
          cat <<EOF > prx-kubeconfig.yaml
          apiVersion: v1
          kind: Config
          clusters:
          - name: my-cluster
            cluster:
              server: ${{ steps.get_cluster_info.outputs.CLUSTER_SERVER }}
              certificate-authority-data: ${{ steps.get_cluster_info.outputs.CA_DATA }}
          users:
          - name: prx-user
            user:
              token: ${{ steps.get_token.outputs.TOKEN }}
          contexts:
          - name: prx-context
            context:
              cluster: my-cluster
              user: prx-user
              namespace: ${{ secrets.NAME }}
          current-context: prx-context
          EOF

      - name: Base64 encode kubeconfig file
        id: encode_kubeconfig
        run: |
          BASE64_KUBECONFIG=$(base64 -w 0 prx-kubeconfig.yaml)
          echo "kubeconfig_b64=${BASE64_KUBECONFIG}" >> $GITHUB_OUTPUT

      - name: Mask kubeconfig secret
        run: echo "::add-mask::${{ steps.encode_kubeconfig.outputs.kubeconfig_b64 }}"

      - name: Create Image Pull Secret
        run: |
          kubectl create namespace ${{ secrets.NAME }} --dry-run=client -o yaml | kubectl apply -f -
          kubectl create secret docker-registry ${{ secrets.IMAGE_PULL_SECRET }} \
            --docker-server=ghcr.io \
            --docker-username=delduked \
            --docker-password="${{ secrets.ACCESS_TOKEN }}" \
            --docker-email="nate@nated.ca" \
            --namespace="${{ secrets.NAME }}" \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Create TLS Secret 
        run: |
          echo "${{ secrets.TLS_CERT }}" > /tmp/tls.crt
          echo "${{ secrets.TLS_KEY }}"  > /tmp/tls.key
          kubectl create secret tls ${{ secrets.NAME }}.io-secret \
            --cert=/tmp/tls.crt \
            --key=/tmp/tls.key \
            --namespace=${{ secrets.NAME }} \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy with Helm
        env:
          PRX_KUBE_CONFIG_B64: ${{ steps.encode_kubeconfig.outputs.kubeconfig_b64 }}
        run: |
          helm upgrade --install go-proxy ./charts \
            --namespace "${{ secrets.NAME }}" \
            --set application.name=${{ secrets.NAME }} \
            --set application.host=${{ secrets.NAME }}.io \
            --set application.secretName=${{ secrets.NAME }}.io-secret \
            --set application.replicas=2 \
            --set application.imagePullSecrets="${{ secrets.IMAGE_PULL_SECRET }}" \
            --set application.JWT_SECRET="${{ secrets.JWT_SECRET }}" \
            --set application.PRX_KUBE_CONFIG=$PRX_KUBE_CONFIG_B64 \
            --set global.image.repository=ghcr.io/typeterrors/go_proxy \
            --set global.image.tag=${{ needs.prepare.outputs.tag }}
