name: BuildPushDeploy

on:
    pull_request:
        types: [closed]
        branches:
            - main
            - dev

jobs:
    build-and-deploy:
        runs-on: ubuntu-latest
        steps:
          - name: Checkout repository
            uses: actions/checkout@v3

          - name: Get short SHA
            uses: benjlevesque/short-sha@v3.0
            id: short-sha
            with:
                length: 6

          - name: Calculate next tag
            id: create_tag
            run: |
                COMMIT_SHA=${{ steps.short-sha.outputs.sha }}
                PR_NUMBER=${{ github.event.pull_request.number }}
                echo "tag=v_${COMMIT_SHA}.${PR_NUMBER}" >> $GITHUB_OUTPUT
                echo "tagname=v_${COMMIT_SHA}.${PR_NUMBER}" >> $GITHUB_OUTPUT 

          - name: Log in to GitHub Container Registry
            run: |
                echo "${{ secrets.GH_RUNNER }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

          - name: Build Docker image
            run: |
                echo "Building go_proxy image"
                docker build -t ghcr.io/typeterrors/go_proxy:${{ steps.create_tag.outputs.tag }} -f ./go_proxy.dockerfile .

          - name: Push Docker image
            run: |
                echo "Pushing Docker image"
                docker push ghcr.io/typeterrors/go_proxy:${{ steps.create_tag.outputs.tag }}
                docker tag ghcr.io/typeterrors/go_proxy:${{ steps.create_tag.outputs.tag }} ghcr.io/typeterrors/go_proxy:latest
                docker push ghcr.io/typeterrors/go_proxy:latest

          - name: Clean up Docker images
            run: |
                echo "Cleaning up Docker images"
                docker image prune -af

          - name: Create Release
            id: create_release
            if: success()
            uses: actions/create-release@v1
            env:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            with:
                tag_name: ${{ steps.create_tag.outputs.tag }}
                release_name: ${{ steps.create_tag.outputs.tagname }}
                draft: false
                prerelease: false

            # Set up Kubectl
          - name: Set up Kubectl
            uses: azure/setup-kubectl@v3
            with:
                version: 'v1.22.0' # Specify your Kubernetes version

            # Set up Helm
          - name: Set up Helm
            uses: azure/setup-helm@v3
            with:
                version: 'v3.8.0' # Specify your Helm version


          - name: Configure Kube
            run: |
              mkdir -p ~/.kube
              echo "${{ secrets.KUBECONFIG }}" > ~/.kube/config
              kubectl config get-contexts

            # Deploy using Helm
          - name: Deploy with Helm
            run: |
                helm upgrade --install go_proxy ./charts --namespace "aproxynate" \
                    --set global.image.tag=${{ steps.create_tag.outputs.tag }} \
                    --set application.JWT_SECRET=${{ secrets.JWT_SECRET }} \
                    --set application.name="aproxynate"
