name: BuildPushDeploy

on:
    pull_request:
        types: [closed]
        branches:
            - main
            - dev

jobs:
    build-and-deploy:
        runs-on: ubuntu-latest
        steps:
          - name: Checkout repository
            uses: actions/checkout@v3

          - name: Get short SHA
            uses: benjlevesque/short-sha@v3.0
            id: short-sha
            with:
                length: 6

          - name: Calculate next tag
            id: create_tag
            run: |
                COMMIT_SHA=${{ steps.short-sha.outputs.sha }}
                PR_NUMBER=${{ github.event.pull_request.number }}
                echo "tag=v_${COMMIT_SHA}.${PR_NUMBER}" >> $GITHUB_OUTPUT
                echo "tagname=v_${COMMIT_SHA}.${PR_NUMBER}" >> $GITHUB_OUTPUT 

          - name: Log in to GitHub Container Registry
            run: |
                echo "${{ secrets.GH_RUNNER }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

          - name: Build Docker image
            run: |
              echo "Building go_proxy image"
              docker build -t ghcr.io/typeterrors/go_proxy:${{ steps.create_tag.outputs.tag }} \
                  --build-arg VERSION=${{ steps.create_tag.outputs.tag }} \
                  -f ./go_proxy.dockerfile .

          - name: Push Docker image
            run: |
              echo "Pushing Docker image"
              docker push ghcr.io/typeterrors/go_proxy:${{ steps.create_tag.outputs.tag }}
              docker tag ghcr.io/typeterrors/go_proxy:${{ steps.create_tag.outputs.tag }} ghcr.io/typeterrors/go_proxy:latest
              docker push ghcr.io/typeterrors/go_proxy:latest

          - name: Clean up Docker images
            run: |
              echo "Cleaning up Docker images"
              docker image prune -af

          - name: Create Release
            id: create_release
            if: success()
            uses: actions/create-release@v1
            env:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            with:
                tag_name: ${{ steps.create_tag.outputs.tag }}
                release_name: ${{ steps.create_tag.outputs.tagname }}
                draft: false
                prerelease: false

            # Set up Kubectl
          - name: Set up Kubectl
            uses: azure/setup-kubectl@v4
            with:
                version: 'v1.28.0' # Specify your Kubernetes version

            # Set up Helm
          - name: Set up Helm
            uses: azure/setup-helm@v3
            with:
                version: 'v3.8.0' # Specify your Helm version

          - name: Configure Kube
            run: |
              mkdir -p ~/.kube
              printf "%s" "${{ secrets.KUBECONFIG }}" > ~/.kube/config
              kubectl config get-contexts

          - name: Create ServiceAccount in namespace
            run: |
              echo "Creating ServiceAccount prx-user in namespace..."
              kubectl create serviceaccount prx-user -n ${{ secrets.NAME }} --dry-run=client -o yaml | kubectl apply -f -

          - name: Create Role for ServiceAccount
            run: |
              echo "Creating Role prx-user-role in namespace..."
              cat <<EOF | kubectl apply -f -
              apiVersion: rbac.authorization.k8s.io/v1
              kind: Role
              metadata:
                name: prx-user-role
                namespace: ${{ secrets.NAME }}
              rules:
              - apiGroups: [""]
                resources: ["secrets"]
                verbs: ["create", "update", "patch", "delete"]
              - apiGroups: ["networking.k8s.io"]
                resources: ["ingresses"]
                verbs: ["create", "update", "patch", "delete"]
              - apiGroups: [""]
                resources: ["configmaps"]
                verbs: ["create", "update", "patch", "delete"]
              EOF

          - name: Create RoleBinding for ServiceAccount
            run: |
              echo "Creating RoleBinding prx-user-rolebinding in namespace..."
              cat <<EOF | kubectl apply -f -
              apiVersion: rbac.authorization.k8s.io/v1
              kind: RoleBinding
              metadata:
                name: prx-user-rolebinding
                namespace: ${{ secrets.NAME }}
              subjects:
              - kind: ServiceAccount
                name: prx-user
                namespace: ${{ secrets.NAME }}
              roleRef:
                kind: Role
                name: prx-user-role
                apiGroup: rbac.authorization.k8s.io
              EOF

          - name: Create token for ServiceAccount
            id: create_token
            run: |
              echo "Creating token for ServiceAccount prx-user..."
              TOKEN=$(kubectl create token prx-user -n ${{ secrets.NAME }})
              if [ -z "$TOKEN" ]; then
                echo "Failed to create token for prx-user" >&2
                exit 1
              fi
              echo "TOKEN=${TOKEN}" >> $GITHUB_OUTPUT

          - name: Get cluster info
            id: get_cluster_info
            run: |
              echo "Retrieving cluster server URL and CA data..."

              CLUSTER_SERVER=$(kubectl config view --minify --raw -o jsonpath='{.clusters[0].cluster.server}')
              CA_DATA=$(kubectl config view --minify --raw -o jsonpath='{.clusters[0].cluster.certificate-authority-data}')

              echo "CLUSTER_SERVER=${CLUSTER_SERVER}" >> $GITHUB_OUTPUT
              echo "CA_DATA=${CA_DATA}" >> $GITHUB_OUTPUT

          - name: Generate kubeconfig file
            id: generate_kubeconfig
            run: |
              echo "Generating kubeconfig file prx-kubeconfig.yaml..."
              
              TOKEN=${{ steps.create_token.outputs.TOKEN }}
              CLUSTER_SERVER=${{ steps.get_cluster_info.outputs.CLUSTER_SERVER }}

              CA_DATA=${{ steps.get_cluster_info.outputs.CA_DATA }}
              
              cat <<EOF > prx-kubeconfig.yaml
              apiVersion: v1
              kind: Config
              clusters:
              - name: my-cluster
                cluster:
                  server: ${CLUSTER_SERVER}
                  certificate-authority-data: ${CA_DATA}
              users:
              - name: prx-user
                user:
                  token: ${TOKEN}
              contexts:
              - name: prx-context
                context:
                  cluster: my-cluster
                  user: prx-user
                  namespace: ${{ secrets.NAME }}
              current-context: prx-context
              EOF

          - name: Base64 encode kubeconfig file
            id: encode_kubeconfig
            run: |
              echo "Encoding kubeconfig file to base64..."

              # Use -w 0 to wrap on a single line (Linux). 
              BASE64_KUBECONFIG=$(base64 -w 0 prx-kubeconfig.yaml)

              echo "kubeconfig_b64=${BASE64_KUBECONFIG}" >> $GITHUB_OUTPUT

          - name: Create Image Pull Secret
            run: |
              kubectl create namespace "${{ secrets.NAME }}" --dry-run=client -o yaml | kubectl apply -f -
              
              kubectl create secret docker-registry "${{ secrets.IMAGE_PULL_SECRET }}" \
                --docker-server=ghcr.io \
                --docker-username=delduked \
                --docker-password="${{ secrets.ACCESS_TOKEN }}" \
                --docker-email="nate@nated.ca" \
                --namespace="${{ secrets.NAME }}" \
                --dry-run=client -o yaml | kubectl apply -f -

          - name: Create TLS Secret 
            env:
              TLS_CERT: ${{ secrets.TLS_CERT }}
              TLS_KEY: ${{ secrets.TLS_KEY }}
            run: |
              echo "$TLS_CERT" > /tmp/tls.crt
              echo "$TLS_KEY"  > /tmp/tls.key

              kubectl create namespace ${{ secrets.NAME }} --dry-run=client -o yaml | kubectl apply -f -

              kubectl create secret tls ${{ secrets.NAME }}.io-secret \
                --cert=/tmp/tls.crt \
                --key=/tmp/tls.key \
                --namespace=${{ secrets.NAME }} \
                --dry-run=client -o yaml | kubectl apply -f -

            # Deploy using Helm
          - name: Deploy with Helm
            run: |
              helm upgrade --install go-proxy ./charts --namespace "${{ secrets.NAME }}" \
                  --set application.name=${{ secrets.NAME }} \
                  --set application.host=${{ secrets.NAME }}.io \
                  --set application.secretName=${{ secrets.NAME }}.io-secret \
                  --set application.replicas=2 \
                  --set-string application.imagePullSecrets="${{ secrets.IMAGE_PULL_SECRET }}" \
                  --set-string application.JWT_SECRET="${{ secrets.JWT_SECRET }}" \
                  --set-string application.PRX_KUBE_CONFIG="${{ steps.encode_kubeconfig.outputs.kubeconfig_b64 }}" \
                  --set global.image.repository=ghcr.io/typeterrors/go_proxy \
                  --set global.image.tag=${{ steps.create_tag.outputs.tag }}
